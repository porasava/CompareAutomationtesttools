"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const chaiAsPromised = require("chai-as-promised");
const Mocha = require("mocha");
const path = require("path");
const repl = require("repl");
const selenium_webdriver_1 = require("selenium-webdriver");
const chrome = require("selenium-webdriver/chrome");
const firefox = require("selenium-webdriver/firefox");
require("./webdriver-plus");
chai.use(chaiAsPromised);
/**
 * By using `import {assert} from 'webdriver-mocha', you can rely on chai-as-promised,
 * e.g. use `await assert.isRejected(promise)`.
 */
var chai_1 = require("chai");
exports.assert = chai_1.assert;
/**
 * Everything is re-exported from selenium-webdriver. This way, you can do e.g.
 *    import {assert, driver, WebElement} from 'mocha-webdriver';
 */
__export(require("selenium-webdriver"));
const _servers = new Set();
/**
 * Use this from a test suite (i.e. inside a describe() clause) to start the given server. If the
 * same server is used by multiple tests, the server is reused.
 */
function useServer(server) {
    before(async () => {
        if (!_servers.has(server)) {
            _servers.add(server);
            await server.start();
        }
    });
    // Stopping of the started-up servers happens in cleanup().
}
exports.useServer = useServer;
// Command-line option for whether to keep browser open if a test fails. This is interpreted by
// mocha, and we use it too to start up a REPL when this option is used.
const noexit = (process.argv.indexOf("--no-exit") !== -1);
// Start up the webdriver and serve files that its browser will see.
before(async function () {
    this.timeout(20000); // Set a longer default timeout.
    // Set up browser options.
    const logPrefs = new selenium_webdriver_1.logging.Preferences();
    logPrefs.setLevel(selenium_webdriver_1.logging.Type.BROWSER, selenium_webdriver_1.logging.Level.INFO);
    // Prepend node_modules/.bin to PATH, for chromedriver/geckodriver to be found.
    process.env.PATH = path.resolve("node_modules", ".bin") + ":" + process.env.PATH;
    exports.driver = new selenium_webdriver_1.Builder()
        .forBrowser('firefox')
        .setLoggingPrefs(logPrefs)
        .setChromeOptions(new chrome.Options())
        .setFirefoxOptions(new firefox.Options())
        .build();
});
// Quit the webdriver and stop serving files, unless we failed and --no-exit is given.
after(async function () {
    let countFailed = 0;
    const testParent = this.test.parent;
    testParent.eachTest((test) => { countFailed += test.state === 'failed' ? 1 : 0; });
    if (countFailed > 0 && noexit) {
        const files = new Set();
        testParent.eachTest((test) => { if (test.state === 'failed') {
            files.add(test.file);
        } });
        // This is an intentional floating promise, it keeps the process running, and takes care of
        // exiting when appropriate.
        // tslint:disable-next-line:no-floating-promises
        startRepl(Array.from(files));
    }
    else {
        await cleanup();
    }
});
async function cleanup() {
    if (exports.driver) {
        await exports.driver.quit();
    }
    // Stop all servers registered with useServer().
    await Promise.all(Array.from(_servers, (server) => server.stop()));
}
async function startRepl(files) {
    // Wait a bit to let mocha print out its errors before REPL prints its prompts.
    await new Promise((resolve) => setTimeout(resolve, 50));
    // Continue running by keeping server and webdriver, and waiting for an hour.
    // tslint:disable:no-console
    console.log("Not exiting. Abort with Ctrl-C, or type '.exit'");
    console.log("You may interact with the browser here, e.g. driver.find('.css_selector')");
    console.log("Failed tests; may rerun with rerun() function:");
    for (const [i, file] of files.entries()) {
        console.log(`  rerun(${i === 0 ? '' : i}): ${file}`);
    }
    const replObj = repl.start({ prompt: "node> ", ignoreUndefined: true });
    enhanceRepl(replObj);
    // Here are the extra globals available in the REPL prompt.
    Object.assign(replObj.context, {
        driver: exports.driver,
        rerun: rerun.bind(null, files),
    });
    replObj.on('exit', cleanup);
}
// Global REPL function that reruns the i-th failed test suite.
function rerun(files, i = 0) {
    const file = files[i];
    delete require.cache[file];
    const mocha = new Mocha({ bail: true });
    mocha.addFile(file);
    // This is the fromCallback() idiom without the fromCallback() helper.
    return new Promise((resolve, reject) => mocha.run((err) => err ? reject(err) : resolve()));
}
// Replace REPL's eval with a version that resolves returned values and stringifies WebElements.
function enhanceRepl(replObj) {
    const origEval = replObj.eval;
    replObj.eval = function (cmd, context, filename, callback) {
        origEval(cmd, context, filename, (err, value) => {
            if (err) {
                callback(err, value);
            }
            Promise.resolve(value)
                .then((result) => useElementDescriptions(result))
                .then((result) => callback(err, result))
                .catch((error) => callback(error));
        });
    };
}
async function useElementDescriptions(obj) {
    if (obj instanceof selenium_webdriver_1.WebElement) {
        return await obj.describe();
    }
    else if (Array.isArray(obj)) {
        return await Promise.all(obj.map(useElementDescriptions));
    }
    else {
        return obj;
    }
}
//# sourceMappingURL=index.js.map