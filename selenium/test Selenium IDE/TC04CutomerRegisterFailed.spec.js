// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('TC4CutomerRegisterFailed', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('TC4CutomerRegisterFailed', async function() {
    // Test name: TC4CutomerRegisterFailed
    // Step # | name | target | value
    // 1 | open | / | 
    await driver.get("http://192.168.3.111:8042")
    // 2 | setWindowSize | 1680x737 | 
    await driver.manage().window().setRect({ width: 1680, height: 737 })
    // 3 | click | id=loginlink | 
    await driver.findElement(By.id("loginlink")).click()
/*     await driver.findElement(By.css(`#loginlink`)).click(); */
    // 4 | click | linkText=Customer Register | 
    await driver.findElement(By.xpath("//a[contains(text(),'Customer Register')]")).click()

/*     await driver.findElement(By.xpath(`(//a[normalize-space()='Customer Register'])[1]`)).click(); */

    // 5 | click | id=FirstName | 
    await driver.findElement(By.id("FirstName")).click()
    // 6 | type | id=FirstName | Tanya
    await driver.findElement(By.id("FirstName")).sendKeys("Tanya")
    // 7 | type | id=LastName | Asava
    await driver.findElement(By.id("LastName")).sendKeys("Asava")
    // 8 | type | id=UserName | Tanya123
    await driver.findElement(By.id("UserName")).sendKeys("Tanya123")
    // 9 | type | id=Email | por_asava
    await driver.findElement(By.id("Email")).sendKeys("por_asava")
/*     // 10 | mouseOver | css=.btn | 
    {
      const element = await driver.findElement(By.css(".btn"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    } */
    await driver.findElement(By.xpath(`//input[@value="Submit"]`)).click();
    // 11 | mouseOut | css=.btn | 
    /* {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    // 12 | mouseDown | css=.btn | 
    {
      const element = await driver.findElement(By.css(".btn"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    // 13 | mouseUp | css=.form-horizontal | 
    {
      const element = await driver.findElement(By.css(".form-horizontal"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    // 14 | click | css=.form-horizontal | 
    await driver.findElement(By.css(".form-horizontal")).click() */
    // 15 | close |  | 
    await driver.close()
  })
})
